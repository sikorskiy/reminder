"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –≤ Telegram –±–æ—Ç–µ
"""

import logging
from typing import List, Optional
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Message, Bot
from telegram.ext import CallbackQueryHandler

logger = logging.getLogger(__name__)

class InlineButtonManager:
    def __init__(self, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ inline-–∫–Ω–æ–ø–æ–∫
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
        """
        self.bot = bot
    
    def create_reminder_buttons(self) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
        
        Returns:
            InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏
        """
        keyboard = [
            [
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_reminder"),
                InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="mark_done")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    
    async def add_buttons_to_message(self, message: Message) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
            
        Returns:
            True –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        try:
            keyboard = self.create_reminder_buttons()
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∫–Ω–æ–ø–∫–∏
            await self.bot.edit_message_reply_markup(
                chat_id=message.chat_id,
                message_id=message.message_id,
                reply_markup=keyboard
            )
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã inline-–∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message.message_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ inline-–∫–Ω–æ–ø–æ–∫: {e}")
            return False
    
    def get_button_description(self, callback_data: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ callback_data
        
        Args:
            callback_data: –î–∞–Ω–Ω—ã–µ callback
            
        Returns:
            –û–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        """
        descriptions = {
            "cancel_reminder": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            "mark_done": "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ"
        }
        return descriptions.get(callback_data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞")
    
    def format_buttons_help(self) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–Ω–æ–ø–∫–∞–º
        
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
        """
        help_text = "üéØ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:</b>\n\n"
        help_text += "‚ùå <b>–û—Ç–º–µ–Ω–∏—Ç—å</b> - –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        help_text += "‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ</b> - –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ\n\n"
        help_text += "üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        help_text += "1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º\n"
        help_text += "2. –ü–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏\n"
        help_text += "3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        help_text += "4. –ö–Ω–æ–ø–∫–∏ –∏—Å—á–µ–∑–Ω—É—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è\n\n"
        help_text += "‚ö†Ô∏è <i>–ö–Ω–æ–ø–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö!</i>"
        
        return help_text
