import os
import logging
from datetime import datetime
import pytz
from dotenv import load_dotenv
import httpx
import pandas as pd
from google_sheets import GoogleSheetsReminder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram_bot import ReminderBot
import asyncio
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Sheets
GS_CREDS = 'finagent-461009-8c1e97a2ff0c.json'
GS_SPREADSHEET = 'reminders'
GS_WORKSHEET = 'reminders'
DEFAULT_TIMEZONE = 'Europe/Moscow'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
gs = GoogleSheetsReminder(GS_CREDS, GS_SPREADSHEET, GS_WORKSHEET)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
bot_instance = None

async def send_reminder(reminder_id: str, text: str, reminder_row: int = None, comment: str = '') -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ Telegram"""
    try:
        if bot_instance:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            from telegram import Bot
            from inline_buttons import InlineButtonManager
            
            bot = Bot(TELEGRAM_TOKEN)
            inline_manager = InlineButtonManager(bot)
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = inline_manager.create_reminder_buttons()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminder_text = f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n\n{text}"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ), –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if comment:
                reminder_text += f"\n\nüìé <b>–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{comment}"
            
            message = await bot.send_message(
                chat_id=TELEGRAM_CHAT_ID,
                text=reminder_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
            if reminder_row and bot_instance.inline_button_handler:
                reminder_data = {
                    'row': reminder_row,
                    'text': text,
                    'datetime': None,  # –í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ
                    'timezone': DEFAULT_TIMEZONE
                }
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∫–∞–∫ user_id –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
                bot_instance.inline_button_handler.set_last_reminder(int(TELEGRAM_CHAT_ID), reminder_data)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {text}")
            return True
        else:
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ HTTP API –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            clean_token = TELEGRAM_TOKEN.strip()
            url = f"https://api.telegram.org/bot{clean_token}/sendMessage"
            async with httpx.AsyncClient() as client:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                reminder_text = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n{text}"
                if comment:
                    reminder_text += f"\n\nüìé –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{comment}"
                
                response = await client.post(
                    url,
                    json={
                        "chat_id": TELEGRAM_CHAT_ID,
                        "text": reminder_text
                    }
                )
                if response.status_code == 200:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {response.text}")
                    return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return False

async def check_reminders() -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ Google Sheets"""
    reminders = gs.get_reminders()
    current_time = datetime.now(pytz.UTC)
    
    for reminder in reminders:
        reminder_id = f"{reminder['datetime']}_{reminder['text']}"
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            timezone_str = reminder.get('timezone') or DEFAULT_TIMEZONE
            try:
                timezone = pytz.timezone(timezone_str)
            except pytz.exceptions.UnknownTimeZoneError:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å '{timezone_str}', –∏—Å–ø–æ–ª—å–∑—É–µ–º {DEFAULT_TIMEZONE}")
                timezone = pytz.timezone(DEFAULT_TIMEZONE)
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
            dt = pd.to_datetime(reminder['datetime'])
            if dt.tzinfo is None or dt.tzinfo.utcoffset(dt) is None:
                reminder_time = dt.tz_localize(timezone)
            else:
                reminder_time = dt.tz_convert(timezone)
            
            reminder_time_utc = reminder_time.astimezone(pytz.UTC)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
            if current_time >= reminder_time_utc:
                success = await send_reminder(reminder_id, reminder['text'], reminder['row'], reminder.get('comment', ''))
                if success:
                    gs.mark_as_sent(reminder['row'])
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}: {e}")

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not all([TELEGRAM_TOKEN, OPENAI_API_KEY]):
        missing = []
        if not TELEGRAM_TOKEN:
            missing.append('TELEGRAM_TOKEN')
        if not OPENAI_API_KEY:
            missing.append('OPENAI_API_KEY')
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
        return
        
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    bot = ReminderBot(TELEGRAM_TOKEN, OPENAI_API_KEY, gs)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
    global bot_instance
    bot_instance = bot
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        check_reminders,
        CronTrigger(minute='*'),
        id='check_reminders',
        replace_existing=True
    )
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    try:
        bot_task = asyncio.create_task(bot.run_async())
        await bot_task
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main: {e}")
    finally:
        scheduler.shutdown()
        logger.info("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == '__main__':
    asyncio.run(main()) 