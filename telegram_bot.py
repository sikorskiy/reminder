import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from message_processor import MessageProcessor
from google_sheets import GoogleSheetsReminder
from voice_processor import VoiceProcessor
from inline_button_handler import InlineButtonHandler
from inline_buttons import InlineButtonManager
import os
import asyncio

logger = logging.getLogger(__name__)

class ReminderBot:
    def __init__(self, telegram_token: str, openai_api_key: str, google_sheets: GoogleSheetsReminder):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            telegram_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            openai_api_key: API –∫–ª—é—á OpenAI
            google_sheets: –≠–∫–∑–µ–º–ø–ª—è—Ä GoogleSheetsReminder
        """
        self.telegram_token = telegram_token
        self.google_sheets = google_sheets
        self.message_processor = MessageProcessor(openai_api_key)
        self.voice_processor = VoiceProcessor(openai_api_key)
        self.inline_button_handler = InlineButtonHandler(google_sheets)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(telegram_token).build()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä inline-–∫–Ω–æ–ø–æ–∫
        self.inline_button_manager = InlineButtonManager(self.application.bot)
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.last_user_messages = {}  # {user_id: {'message': text, 'timestamp': time, 'update': update_obj}}
        
        # –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        self.MESSAGE_LINK_TIMEOUT = 10  # 10 —Å–µ–∫—É–Ω–¥
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("buttons", self.buttons_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.FORWARDED, self.handle_message))
        self.application.add_handler(MessageHandler(filters.VOICE, self.handle_voice_message))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏
        self.application.add_handler(MessageHandler(filters.FORWARDED, self.handle_forwarded_only))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.handle_callback_query))
    
    def cleanup_expired_messages(self):
        """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        import time
        current_time = time.time()
        expired_users = []
        
        for user_id, data in self.last_user_messages.items():
            if current_time - data['timestamp'] > self.MESSAGE_LINK_TIMEOUT:
                expired_users.append(user_id)
        
        for user_id in expired_users:
            del self.last_user_messages[user_id]
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª—å—â–∏–∫.

–¢—ã –º–æ–∂–µ—à—å:
üìù –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –æ –≤—Å—Ç—Ä–µ—á–µ"
‚Ä¢ "–ö—É–ø–∏—Ç—å —Ö–ª–µ–± —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
‚Ä¢ "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤ —Å—É–±–±–æ—Ç—É –≤ 10 —É—Ç—Ä–∞"

–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.
        """
        await update.message.reply_text(welcome_message)
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:

üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
1. –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç
3. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É

üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
1. –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
2. –ë–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –∏ –∏–∑–≤–ª–µ—á–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
3. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É

–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –æ –≤—Å—Ç—Ä–µ—á–µ"
‚Ä¢ "–ö—É–ø–∏—Ç—å —Ö–ª–µ–± —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
‚Ä¢ "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤ —Å—É–±–±–æ—Ç—É –≤ 10 —É—Ç—Ä–∞"
‚Ä¢ "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º 20 —è–Ω–≤–∞—Ä—è –≤ 14:30"

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/buttons - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        """
        await update.message.reply_text(help_message)
        
    async def buttons_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buttons"""
        help_text = self.inline_button_manager.format_buttons_help()
        
        await update.message.reply_text(help_text, parse_mode='HTML')
        
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text
        user_id = update.effective_user.id
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message}")
        
        # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.cleanup_expired_messages()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º
        import time
        self.last_user_messages[user_id] = {
            'message': user_message,
            'timestamp': time.time(),
            'update': update,
            'context': context
        }
        
        # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∏–¥–µ—Ç –ª–∏ –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await asyncio.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–æ –ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        new_message = await self.check_for_new_message(user_id, user_message)
        
        if new_message is None:
            # –ù–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–∏—à–ª–æ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–µ
            await self.process_single_message(user_message, update, context)
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if user_id in self.last_user_messages:
                del self.last_user_messages[user_id]
        else:
            # –ü—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–¥–µ—Å—å
            # –û–Ω–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ handle_forwarded_only –∏–ª–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ last_user_messages
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤ last_user_messages")
    
    async def check_for_new_message(self, user_id, current_message):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏—à–ª–æ –ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updates = await self.application.bot.get_updates(limit=10)
            
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ
            for update in updates:
                if (update.message and 
                    update.message.from_user and 
                    update.message.from_user.id == user_id and
                    update.message.text != current_message):  # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ check_for_new_message: text='{update.message.text}', forward_from={update.message.forward_from}")
                    return update.message
            logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ check_for_new_message –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def handle_forwarded_only(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏"""
        user_id = update.effective_user.id
        forwarded_message = update.message
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        forwarded_text = forwarded_message.text or forwarded_message.caption or "–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
        logger.info(f"–ü–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: text='{forwarded_message.text}', caption='{forwarded_message.caption}', –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç='{forwarded_text}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–¥–∞–≤–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –í –ü–†–ò–ù–¶–ò–ü–ï (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ user_id)
        if self.last_user_messages:
            import time
            # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞
            last_user_id, last_msg_data = max(self.last_user_messages.items(), key=lambda kv: kv[1]['timestamp'])
            time_diff = time.time() - last_msg_data['timestamp']
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ last_user_messages (user {last_user_id}): '{last_msg_data['message']}', –≤—Ä–µ–º—è —Ä–∞–∑–Ω–∏—Ü—ã: {time_diff:.2f}—Å, —Ç–∞–π–º–∞—É—Ç: {self.MESSAGE_LINK_TIMEOUT}—Å")
            
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ —Ç–∞–π–º–∞—É—Ç–∞ - —Å–≤—è–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            if time_diff < self.MESSAGE_LINK_TIMEOUT:
                logger.info(f"–°–≤—è–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è: –ø–µ—Ä–≤–æ–µ='{last_msg_data['message']}', –≤—Ç–æ—Ä–æ–µ='{forwarded_text}'")
                await self.handle_message_pair(
                    last_msg_data['message'],
                    forwarded_text,
                    last_msg_data['update'],
                    last_msg_data['context']
                )
                # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞
                if last_user_id in self.last_user_messages:
                    del self.last_user_messages[last_user_id]
                return
            else:
                logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ: {time_diff:.2f}—Å > {self.MESSAGE_LINK_TIMEOUT}—Å")
        else:
            logger.info("–ë—É—Ñ–µ—Ä last_user_messages –ø—É—Å—Ç")
        
        # –ë—É—Ñ–µ—Ä –ø—É—Å—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ –∫–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        processing_message = await update.message.reply_text("üìé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∏–∑ –¢–ï–ö–°–¢–ê –ü–ï–†–ï–°–õ–ê–ù–ù–û–ì–û
            reminder_info = self.message_processor.extract_reminder_info(forwarded_text)
            
            if reminder_info is None:
                await processing_message.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n<i>{forwarded_text}</i>",
                    parse_mode='HTML'
                )
                return
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
            is_valid, error_message = self.message_processor.validate_reminder_info(reminder_info)
            if not is_valid:
                logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error_message}")
                await processing_message.edit_text(
                    f"ü§î <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n<i>–ü—Ä–∏—á–∏–Ω–∞:</i> {error_message}",
                    parse_mode='HTML'
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º: —Ç–µ–∫—Å—Ç –∏–∑ reminder_info, –∞ –ü–û–õ–ù–´–ô –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π ‚Äî –≤ comment (6 —Å—Ç–æ–ª–±–µ—Ü)
            row_number = self.google_sheets.add_reminder(
                datetime_str=reminder_info.get('datetime'),
                text=reminder_info['text'],
                timezone=reminder_info.get('timezone', 'Europe/Moscow'),
                comment=forwarded_text
            )
            
            if row_number:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
                reminder_data = {
                    'row': row_number,
                    'datetime': reminder_info.get('datetime'),
                    'text': reminder_info['text'],
                    'timezone': reminder_info.get('timezone', 'Europe/Moscow')
                }
                self.inline_button_handler.set_last_reminder(user_id, reminder_data)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                from datetime import datetime
                timezone = reminder_info.get('timezone', 'Europe/Moscow')
                text = reminder_info['text']
                
                if reminder_info.get('datetime'):
                    dt = datetime.strptime(reminder_info['datetime'], '%Y-%m-%d %H:%M:%S')
                    formatted_time = dt.strftime('%d.%m.%Y –≤ %H:%M')
                    time_info = f"‚è∞ <b>–í—Ä–µ–º—è:</b> {formatted_time}\nüåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {timezone}\n\nüîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
                    table_info = f"<code>{reminder_info['datetime']} | {text} | {timezone} | FALSE | | {forwarded_text[:50]}...</code>"
                else:
                    time_info = "‚ö†Ô∏è <b>–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ</b> - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"
                    table_info = f"<code> | {text} | {timezone} | FALSE | | {forwarded_text[:50]}...</code>"
                
                success_message = (
                    f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>\n\n"
                    f"üìé <b>–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> {forwarded_text[:100]}{'...' if len(forwarded_text) > 100 else ''}\n\n"
                    f"üìù <b>–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {text}\n"
                    f"{time_info}\n\n"
                    f"üìä <i>–°—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ:</i>\n"
                    f"{table_info}"
                )
                await processing_message.edit_text(success_message, parse_mode='HTML')
            else:
                await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await processing_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def handle_message_pair(self, first_message, second_message, update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π: –ø–æ—è—Å–Ω—è—é—â–µ–µ + –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ"""
        user_id = update.effective_user.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        processing_message = await update.message.reply_text("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            reminder_info = self.message_processor.extract_reminder_info(first_message)
            
            if reminder_info is None:
                await processing_message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –±–æ–ª–µ–µ —á–µ—Ç–∫–æ."
                )
                return
                
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            is_valid, error_message = self.message_processor.validate_reminder_info(reminder_info)
            
            if not is_valid:
                await processing_message.edit_text(
                    f"ü§î <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
                    f"<i>–ü—Ä–∏—á–∏–Ω–∞:</i> {error_message}"
                )
                return
                
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ Google Sheets —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
            logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: '{second_message}'")
            row_number = self.google_sheets.add_reminder(
                datetime_str=reminder_info.get('datetime'),  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                text=reminder_info['text'],
                timezone=reminder_info.get('timezone', 'Europe/Moscow'),
                comment=second_message  # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            )
            
            if row_number:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                reminder_data = {
                    'row': row_number,
                    'datetime': reminder_info.get('datetime'),  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                    'text': reminder_info['text'],
                    'timezone': reminder_info.get('timezone', 'Europe/Moscow')
                }
                self.inline_button_handler.set_last_reminder(user_id, reminder_data)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                from datetime import datetime
                timezone = reminder_info.get('timezone', 'Europe/Moscow')
                text = reminder_info['text']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º—è
                if reminder_info.get('datetime'):
                    dt = datetime.strptime(reminder_info['datetime'], '%Y-%m-%d %H:%M:%S')
                    formatted_time = dt.strftime('%d.%m.%Y –≤ %H:%M')
                    time_info = f"‚è∞ <b>–í—Ä–µ–º—è:</b> {formatted_time}\nüåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {timezone}\n\nüîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
                    table_info = f"<code>{reminder_info['datetime']} | {text} | {timezone} | FALSE | | {second_message[:50]}...</code>"
                else:
                    time_info = "‚ö†Ô∏è <b>–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ</b> - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"
                    table_info = f"<code> | {text} | {timezone} | FALSE | | {second_message[:50]}...</code>"
                
                success_message = (
                    f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –ø–∞—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π!</b>\n\n"
                    f"üìù <b>–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {text}\n"
                    f"üìé <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {second_message[:100]}{'...' if len(second_message) > 100 else ''}\n"
                    f"{time_info}\n\n"
                    f"üìä <i>–°—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ:</i>\n"
                    f"{table_info}"
                )
                
                await processing_message.edit_text(success_message, parse_mode='HTML')
            else:
                await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            await processing_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def process_single_message(self, user_message, update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        processing_message = await update.message.reply_text("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é ChatGPT
            reminder_info = self.message_processor.extract_reminder_info(user_message)
            
            if reminder_info is None:
                await processing_message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –±–æ–ª–µ–µ —á–µ—Ç–∫–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "‚Ä¢ \"–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –æ –≤—Å—Ç—Ä–µ—á–µ\"\n"
                    "‚Ä¢ \"–ö—É–ø–∏—Ç—å —Ö–ª–µ–± —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\""
                )
                return
                
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            is_valid, error_message = self.message_processor.validate_reminder_info(reminder_info)
            
            if not is_valid:
                logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error_message}")
                logger.warning(f"–î–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_info}")
                await processing_message.edit_text(
                    f"ü§î <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
                    f"<i>–ü—Ä–∏—á–∏–Ω–∞:</i> {error_message}\n\n"
                    f"üí° <b>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n"
                    f"‚Ä¢ \"–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –æ –≤—Å—Ç—Ä–µ—á–µ\"\n"
                    f"‚Ä¢ \"–ö—É–ø–∏—Ç—å —Ö–ª–µ–± —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\"\n"
                    f"‚Ä¢ \"–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤ —Å—É–±–±–æ—Ç—É –≤ 10 —É—Ç—Ä–∞\"\n"
                    f"‚Ä¢ \"–°–¥–∞—Ç—å –æ—Ç—á–µ—Ç –≤ –ø—è—Ç–Ω–∏—Ü—É –¥–æ 18:00\"\n"
                    f"‚Ä¢ \"–ù–∞–ø–æ–º–Ω–∏ –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É\" (—á–µ—Ä–µ–∑ 1 —á–∞—Å)\n\n"
                    f"üé§ <i>–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</i>",
                    parse_mode='HTML'
                )
                return
                
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ Google Sheets
            row_number = self.google_sheets.add_reminder(
                datetime_str=reminder_info.get('datetime'),  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                text=reminder_info['text'],
                timezone=reminder_info.get('timezone', 'Europe/Moscow'),
                comment=''  # –ü—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            )
            
            if row_number:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                reminder_data = {
                    'row': row_number,
                    'datetime': reminder_info.get('datetime'),  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                    'text': reminder_info['text'],
                    'timezone': reminder_info.get('timezone', 'Europe/Moscow')
                }
                self.inline_button_handler.set_last_reminder(user_id, reminder_data)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                from datetime import datetime
                timezone = reminder_info.get('timezone', 'Europe/Moscow')
                text = reminder_info['text']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º—è
                if reminder_info.get('datetime'):
                    dt = datetime.strptime(reminder_info['datetime'], '%Y-%m-%d %H:%M:%S')
                    formatted_time = dt.strftime('%d.%m.%Y –≤ %H:%M')
                    time_info = f"‚è∞ <b>–í—Ä–µ–º—è:</b> {formatted_time}\nüåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {timezone}\n\nüîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
                    table_info = f"<code>{reminder_info['datetime']} | {text} | {timezone} | FALSE</code>"
                else:
                    time_info = "‚ö†Ô∏è <b>–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ</b> - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"
                    table_info = f"<code> | {text} | {timezone} | FALSE</code>"
                
                success_message = (
                    f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                    f"üìù <b>–¢–µ–∫—Å—Ç:</b> {text}\n"
                    f"{time_info}\n\n"
                    f"üìä <i>–°—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ:</i>\n"
                    f"{table_info}"
                )
                
                await processing_message.edit_text(success_message, parse_mode='HTML')
            else:
                await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await processing_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        voice = update.message.voice
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration}—Å")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        processing_message = await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        try:
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            recognized_text = await self.voice_processor.process_voice_message(update, context)
            
            if not recognized_text:
                await processing_message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ\n"
                    "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
                    "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ"
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            await processing_message.edit_text(f"üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<i>{recognized_text}</i>\n\nü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ...", parse_mode='HTML')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é ChatGPT
            reminder_info = self.message_processor.extract_reminder_info(recognized_text)
            
            if reminder_info is None:
                await processing_message.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ:\n<i>{recognized_text}</i>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –±–æ–ª–µ–µ —á–µ—Ç–∫–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "‚Ä¢ \"–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –æ –≤—Å—Ç—Ä–µ—á–µ\"\n"
                    "‚Ä¢ \"–ö—É–ø–∏—Ç—å —Ö–ª–µ–± —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\"",
                    parse_mode='HTML'
                )
                return
                
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            is_valid, error_message = self.message_processor.validate_reminder_info(reminder_info)
            
            if not is_valid:
                logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error_message}")
                logger.warning(f"–î–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_info}")
                await processing_message.edit_text(
                    f"ü§î <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
                    f"<i>–ü—Ä–∏—á–∏–Ω–∞:</i> {error_message}\n\n"
                    f"üí° <b>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n"
                    f"‚Ä¢ \"–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –æ –≤—Å—Ç—Ä–µ—á–µ\"\n"
                    f"‚Ä¢ \"–ö—É–ø–∏—Ç—å —Ö–ª–µ–± —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\"\n"
                    f"‚Ä¢ \"–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤ —Å—É–±–±–æ—Ç—É –≤ 10 —É—Ç—Ä–∞\"\n"
                    f"‚Ä¢ \"–°–¥–∞—Ç—å –æ—Ç—á–µ—Ç –≤ –ø—è—Ç–Ω–∏—Ü—É –¥–æ 18:00\"\n"
                    f"‚Ä¢ \"–ù–∞–ø–æ–º–Ω–∏ –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É\" (—á–µ—Ä–µ–∑ 1 —á–∞—Å)\n\n"
                    f"üé§ <i>–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</i>",
                    parse_mode='HTML'
                )
                return
                
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ Google Sheets
            success = self.google_sheets.add_reminder(
                datetime_str=reminder_info.get('datetime'),  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                text=reminder_info['text'],
                timezone=reminder_info.get('timezone', 'Europe/Moscow')
            )
            
            if success:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                from datetime import datetime
                timezone = reminder_info.get('timezone', 'Europe/Moscow')
                text = reminder_info['text']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º—è
                if reminder_info.get('datetime'):
                    dt = datetime.strptime(reminder_info['datetime'], '%Y-%m-%d %H:%M:%S')
                    formatted_time = dt.strftime('%d.%m.%Y –≤ %H:%M')
                    time_info = f"‚è∞ <b>–í—Ä–µ–º—è:</b> {formatted_time}\nüåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {timezone}\n\nüîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
                    table_info = f"<code>{reminder_info['datetime']} | {text} | {timezone} | FALSE</code>"
                else:
                    time_info = "‚ö†Ô∏è <b>–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ</b> - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"
                    table_info = f"<code> | {text} | {timezone} | FALSE</code>"
                
                success_message = (
                    f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>\n\n"
                    f"üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b> {recognized_text}\n\n"
                    f"üìù <b>–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {text}\n"
                    f"{time_info}\n\n"
                    f"üìä <i>–°—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ:</i>\n"
                    f"{table_info}"
                )
                
                await processing_message.edit_text(success_message, parse_mode='HTML')
            else:
                await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await processing_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫"""
        user_id = update.effective_user.id
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
            handled = await self.inline_button_handler.handle_callback_query(update, context)
            
            if not handled:
                await update.callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.")
    
    # async def handle_forwarded_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    #     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        forwarded_message = update.message
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        forwarded_text = forwarded_message.text or forwarded_message.caption or "–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.last_user_messages:
            import time
            last_msg_data = self.last_user_messages[user_id]
            time_diff = time.time() - last_msg_data['timestamp']
            
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ —Ç–∞–π–º–∞—É—Ç–∞ - —Å–≤—è–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            if time_diff < self.MESSAGE_LINK_TIMEOUT:
                # –ù–ï —É–¥–∞–ª—è–µ–º –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç handle_message_pair
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π
                await self.handle_message_pair(
                    last_msg_data['message'], 
                    forwarded_text, 
                    last_msg_data['update'], 
                    last_msg_data['context']
                )
                return
        
        # –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        processing_message = await update.message.reply_text("üìé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–µ–µ –ø–æ—è—Å–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
            if False:  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
                # –ï—Å—Ç—å –æ–∂–∏–¥–∞—é—â–µ–µ –ø–æ—è—Å–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö
                explanatory_data = self.pending_explanatory_messages[user_id]
                explanatory_message = explanatory_data['message']
                reminder_data = explanatory_data['reminder_data']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
                success = self.google_sheets.update_reminder_comment(reminder_data['row'], forwarded_text)
                
                if success:
                    # –û—á–∏—â–∞–µ–º –æ–∂–∏–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    del self.pending_explanatory_messages[user_id]
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                    success_message = (
                        f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!</b>\n\n"
                        f"üìù <b>–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {reminder_data['text']}\n"
                        f"üìé <b>–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> {forwarded_text[:100]}{'...' if len(forwarded_text) > 100 else ''}\n\n"
                        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
                    )
                    
                    await processing_message.edit_text(success_message, parse_mode='HTML')
                    return
                else:
                    await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return
            
            # –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–æ—è—Å–Ω—è—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é ChatGPT
            reminder_info = self.message_processor.extract_reminder_info(forwarded_text)
            
            if reminder_info is None:
                await processing_message.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n<i>{forwarded_text}</i>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—è—Å–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏.",
                    parse_mode='HTML'
                )
                return
                
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            is_valid, error_message = self.message_processor.validate_reminder_info(reminder_info)
            
            if not is_valid:
                logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error_message}")
                await processing_message.edit_text(
                    f"ü§î <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
                    f"<i>–ü—Ä–∏—á–∏–Ω–∞:</i> {error_message}\n\n"
                    f"üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—è—Å–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏.</b>",
                    parse_mode='HTML'
                )
                return
                
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ Google Sheets —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
            row_number = self.google_sheets.add_reminder(
                datetime_str=reminder_info['datetime'],
                text=reminder_info['text'],
                timezone=reminder_info.get('timezone', 'Europe/Moscow'),
                comment=forwarded_text  # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            )
            
            if row_number:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                reminder_data = {
                    'row': row_number,
                    'datetime': reminder_info.get('datetime'),  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                    'text': reminder_info['text'],
                    'timezone': reminder_info.get('timezone', 'Europe/Moscow')
                }
                self.inline_button_handler.set_last_reminder(user_id, reminder_data)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                from datetime import datetime
                timezone = reminder_info.get('timezone', 'Europe/Moscow')
                text = reminder_info['text']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º—è
                if reminder_info.get('datetime'):
                    dt = datetime.strptime(reminder_info['datetime'], '%Y-%m-%d %H:%M:%S')
                    formatted_time = dt.strftime('%d.%m.%Y –≤ %H:%M')
                    time_info = f"‚è∞ <b>–í—Ä–µ–º—è:</b> {formatted_time}\nüåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {timezone}\n\nüîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
                    table_info = f"<code>{reminder_info['datetime']} | {text} | {timezone} | FALSE | | {forwarded_text[:50]}...</code>"
                else:
                    time_info = "‚ö†Ô∏è <b>–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ</b> - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"
                    table_info = f"<code> | {text} | {timezone} | FALSE | | {forwarded_text[:50]}...</code>"
                
                success_message = (
                    f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>\n\n"
                    f"üìé <b>–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> {forwarded_text[:100]}{'...' if len(forwarded_text) > 100 else ''}\n\n"
                    f"üìù <b>–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {text}\n"
                    f"{time_info}\n\n"
                    f"üìä <i>–°—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ:</i>\n"
                    f"{table_info}"
                )
                
                await processing_message.edit_text(success_message, parse_mode='HTML')
            else:
                await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await processing_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.application.run_polling()

    async def run_async(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º event loop"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (async)...")
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ (–±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–µ)
            while True:
                await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            raise 