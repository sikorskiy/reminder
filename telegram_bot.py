import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from message_processor import MessageProcessor
from google_sheets import GoogleSheetsReminder
from voice_processor import VoiceProcessor
from inline_button_handler import InlineButtonHandler
from inline_buttons import InlineButtonManager
import os
import asyncio

logger = logging.getLogger(__name__)

class ReminderBot:
    def __init__(self, telegram_token: str, openai_api_key: str, google_sheets: GoogleSheetsReminder):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            telegram_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            openai_api_key: API –∫–ª—é—á OpenAI
            google_sheets: –≠–∫–∑–µ–º–ø–ª—è—Ä GoogleSheetsReminder
        """
        self.telegram_token = telegram_token
        self.google_sheets = google_sheets
        self.message_processor = MessageProcessor(openai_api_key)
        self.voice_processor = VoiceProcessor(openai_api_key)
        self.inline_button_handler = InlineButtonHandler(google_sheets)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(telegram_token).build()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä inline-–∫–Ω–æ–ø–æ–∫
        self.inline_button_manager = InlineButtonManager(self.application.bot)
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.last_user_messages = {}  # {user_id: {'message': text, 'timestamp': time, 'update': update_obj}}
        
        # –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        self.MESSAGE_LINK_TIMEOUT = 2  # 2 —Å–µ–∫—É–Ω–¥—ã
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("buttons", self.buttons_command))
        # –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–±—ã—á–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_unified_message))
        self.application.add_handler(MessageHandler(filters.VOICE, self.handle_voice_message))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.handle_callback_query))
    
    def _build_forwarded_gpt_input(self, forwarded_text: str) -> str:
        """–ì–æ—Ç–æ–≤–∏—Ç –æ–±–æ–≥–∞—â—ë–Ω–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è GPT –ø–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é."""
        return (
            "–ü—Ä–µ–æ–±—Ä–∞–∑—É–π –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ –≤ –∫–æ—Ä–æ—Ç–∫—É—é –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∑–∞–¥–∞—á–∏ "
            "–¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–±–µ–∑ —Å–ª–æ–≤ '–Ω–∞–ø–æ–º–Ω–∏', —Ç–æ–ª—å–∫–æ —Å—É—Ç—å –¥–µ–π—Å—Ç–≤–∏—è). –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –≤—Ä–µ–º—è/–¥–∞—Ç—É ‚Äî "
            "–∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö. –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω–∏ datetime: null. –¢–µ–∫—Å—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ: "
            f"{forwarded_text}"
        )

    def _extract_and_validate(self, text: str):
        """
        –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ GPT-–∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (reminder_info | None, error_message | "").
        """
        reminder_info = self.message_processor.extract_reminder_info(text)
        if reminder_info is None:
            return None, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        is_valid, error_message = self.message_processor.validate_reminder_info(reminder_info)
        if is_valid:
            return reminder_info, ""
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º ‚Äì –ø—Ä–æ–±—É–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–º–µ—â–∞—è –≤ –±—É–¥—É—â–µ–µ
        if error_message == "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º":
            adjusted_text = (
                f"{text}\n\n"
                "–í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∞–ª–æ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è. –ü–µ—Ä–µ—Å—á–∏—Ç–∞–π –¥–∞—Ç—É/–≤—Ä–µ–º—è —Ç–∞–∫, "
                "—á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –≤ –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–º—ã—Å–ª."
            )
            second = self.message_processor.extract_reminder_info(adjusted_text)
            if second is None:
                return None, error_message
            is_valid2, err2 = self.message_processor.validate_reminder_info(second)
            if is_valid2:
                return second, ""
            return None, err2
        return None, error_message
    
    def cleanup_expired_messages(self):
        """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        import time
        current_time = time.time()
        expired_users = []
        
        for user_id, data in self.last_user_messages.items():
            if current_time - data['timestamp'] > self.MESSAGE_LINK_TIMEOUT:
                expired_users.append(user_id)
        
        for user_id in expired_users:
            del self.last_user_messages[user_id]
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª—å—â–∏–∫.

–¢—ã –º–æ–∂–µ—à—å:
üìù –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –æ –≤—Å—Ç—Ä–µ—á–µ"
‚Ä¢ "–ö—É–ø–∏—Ç—å —Ö–ª–µ–± —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
‚Ä¢ "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤ —Å—É–±–±–æ—Ç—É –≤ 10 —É—Ç—Ä–∞"

–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.
        """
        await update.message.reply_text(welcome_message)
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:

üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
1. –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç
3. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É

üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
1. –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
2. –ë–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –∏ –∏–∑–≤–ª–µ—á–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
3. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É

–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –æ –≤—Å—Ç—Ä–µ—á–µ"
‚Ä¢ "–ö—É–ø–∏—Ç—å —Ö–ª–µ–± —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
‚Ä¢ "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤ —Å—É–±–±–æ—Ç—É –≤ 10 —É—Ç—Ä–∞"
‚Ä¢ "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º 20 —è–Ω–≤–∞—Ä—è –≤ 14:30"

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/buttons - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        """
        await update.message.reply_text(help_message)
        
    async def buttons_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buttons"""
        help_text = self.inline_button_manager.format_buttons_help()
        
        await update.message.reply_text(help_text, parse_mode='HTML')
        
    async def handle_unified_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–±—ã—á–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö).
        
        –õ–æ–≥–∏–∫–∞:
        1. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        2. –ñ–¥—ë—Ç 2 —Å–µ–∫—É–Ω–¥—ã
        3. –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä—É
        4. –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏—à–ª–æ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–µ
        """
        user_id = update.effective_user.id
        message = update.message
        is_forwarded = bool(message.forward_origin)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = message.text or message.caption or "–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
        if is_forwarded:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message_text}")
        else:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message_text}")
        
        # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.cleanup_expired_messages()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # (—ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–∏—à–ª–æ –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞—Ä–µ)
        existing_message = self.last_user_messages.get(user_id)
        
        import time
        current_time = time.time()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–Ω–æ –Ω–µ —Å—Ç–∞—Ä—à–µ 2 —Å–µ–∫—É–Ω–¥
        if existing_message and (current_time - existing_message['timestamp']) < 2:
            # –≠—Ç–æ –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –ø–∞—Ä—ã!
            first_is_forwarded = existing_message.get('is_forwarded', False)
            # –ü–∞—Ä–∞: –æ–±—ã—á–Ω–æ–µ + –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ (–≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ)
            if (not first_is_forwarded and is_forwarded) or (first_is_forwarded and not is_forwarded):
                first_message = existing_message['message']
                second_message = message_text
                # –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ –±—ã–ª–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º - –º–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
                if first_is_forwarded:
                    first_message, second_message = second_message, first_message
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—É: –ø–µ—Ä–≤–æ–µ='{first_message}', –≤—Ç–æ—Ä–æ–µ='{second_message}'")
                await self.handle_message_pair(first_message, second_message, existing_message['update'], existing_message['context'])
                # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
                self.last_user_messages.pop(user_id, None)
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        self.last_user_messages[user_id] = {
            'message': message_text,
            'is_forwarded': is_forwarded,
            'timestamp': current_time,
            'update': update,
            'context': context
        }
        
        # –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await asyncio.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–¥–∞–ª–µ–Ω–æ –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ (–∑–Ω–∞—á–∏—Ç, –æ–±—Ä–∞–±–æ—Ç–∞–ª–æ—Å—å –∫–∞–∫ –ø–∞—Ä–∞)
        if user_id not in self.last_user_messages:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {user_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –ø–∞—Ä–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ –±–æ–ª–µ–µ —Å–≤–µ–∂–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_data = self.last_user_messages.get(user_id)
        if current_data and current_data['timestamp'] > current_time:
            # –ü–æ—è–≤–∏–ª–æ—Å—å –±–æ–ª–µ–µ —Å–≤–µ–∂–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∑–Ω–∞—á–∏—Ç, –Ω–∞—à–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–∞—Ä–æ–π
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –±–æ–ª–µ–µ —Å–≤–µ–∂–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–∞—à–µ —É–∂–µ –≤ –ø–∞—Ä–µ")
            return
        
        # –ù–µ –ø—Ä–∏—à–ª–æ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–µ
        if is_forwarded:
            await self.process_single_forwarded(update, context, message_text)
        else:
            await self.process_single_message(message_text, update, context)
        
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
        self.last_user_messages.pop(user_id, None)
    
    async def process_single_forwarded(self, update: Update, context: ContextTypes.DEFAULT_TYPE, forwarded_text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        forwarded_message = update.message
        
        processing_message = await update.message.reply_text("üìé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        try:
            # –ì–æ—Ç–æ–≤–∏–º –≤–≤–æ–¥ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —á–µ—Ä–µ–∑ –æ–±—â–∏–π –º–µ—Ç–æ–¥
            gpt_input = self._build_forwarded_gpt_input(forwarded_text)
            reminder_info, err = self._extract_and_validate(gpt_input)
            if not reminder_info:
                await processing_message.edit_text(
                    (f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n<i>{forwarded_text}</i>"
                     if err == "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" else
                     f"ü§î <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n<i>–ü—Ä–∏—á–∏–Ω–∞:</i> {err}"),
                    parse_mode='HTML'
                )
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            def _format_forward_origin(msg):
                origin = getattr(msg, 'forward_origin', None)
                try:
                    # MessageOriginUser
                    sender_user = getattr(origin, 'sender_user', None)
                    if sender_user:
                        name = " ".join(filter(None, [sender_user.first_name, sender_user.last_name]))
                        username = f"@{sender_user.username}" if getattr(sender_user, 'username', None) else ""
                        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name or username or sender_user.id}"
                    # MessageOriginChat
                    sender_chat = getattr(origin, 'sender_chat', None)
                    if sender_chat and getattr(sender_chat, 'title', None):
                        return f"–ß–∞—Ç: {sender_chat.title}"
                    # MessageOriginChannel
                    channel_chat = getattr(origin, 'chat', None)
                    if channel_chat and getattr(channel_chat, 'title', None):
                        return f"–ö–∞–Ω–∞–ª: {channel_chat.title}"
                    # Hidden user name
                    hidden_name = getattr(origin, 'sender_user_name', None)
                    if hidden_name:
                        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {hidden_name}"
                except Exception:
                    pass
                return "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

            forward_from_str = _format_forward_origin(forwarded_message)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º: —Ç–µ–∫—Å—Ç –∏–∑ reminder_info, –∞ –ü–û–õ–ù–´–ô –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π + –∏—Å—Ç–æ—á–Ω–∏–∫ ‚Äî –≤ comment (6 —Å—Ç–æ–ª–±–µ—Ü)
            row_number = self.google_sheets.add_reminder(
                datetime_str=reminder_info.get('datetime'),
                text=reminder_info['text'],
                timezone=reminder_info.get('timezone', 'Europe/Moscow'),
                comment=f"–û—Ç: {forward_from_str}\n\n{forwarded_text}"
            )
            
            if row_number:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
                reminder_data = {
                    'row': row_number,
                    'datetime': reminder_info.get('datetime'),
                    'text': reminder_info['text'],
                    'timezone': reminder_info.get('timezone', 'Europe/Moscow')
                }
                self.inline_button_handler.set_last_reminder(user_id, reminder_data)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                from datetime import datetime
                timezone = reminder_info.get('timezone', 'Europe/Moscow')
                text = reminder_info['text']
                
                if reminder_info.get('datetime'):
                    dt = datetime.strptime(reminder_info['datetime'], '%Y-%m-%d %H:%M:%S')
                    formatted_time = dt.strftime('%d.%m.%Y –≤ %H:%M')
                    time_info = f"‚è∞ <b>–í—Ä–µ–º—è:</b> {formatted_time}\nüåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {timezone}\n\nüîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
                    table_info = f"<code>{reminder_info['datetime']} | {text} | {timezone} | FALSE | | –û—Ç: {forward_from_str} | {forwarded_text[:50]}...</code>"
                else:
                    time_info = "‚ö†Ô∏è <b>–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ</b> - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"
                    table_info = f"<code> | {text} | {timezone} | FALSE | | –û—Ç: {forward_from_str} | {forwarded_text[:50]}...</code>"
                
                success_message = (
                    f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>\n\n"
                    f"üë§ <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {forward_from_str}\n"
                    f"üìé <b>–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> {forwarded_text[:100]}{'...' if len(forwarded_text) > 100 else ''}\n\n"
                    f"üìù <b>–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {text}\n"
                    f"{time_info}\n\n"
                    f"üìä <i>–°—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ:</i>\n"
                    f"{table_info}"
                )
                await processing_message.edit_text(success_message, parse_mode='HTML')
            else:
                await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await processing_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def handle_message_pair(self, first_message, second_message, update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π: –ø–æ—è—Å–Ω—è—é—â–µ–µ + –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ"""
        user_id = update.effective_user.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        processing_message = await update.message.reply_text("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—â–∏–π –º–µ—Ç–æ–¥)
            reminder_info, err = self._extract_and_validate(first_message)
            if not reminder_info:
                await processing_message.edit_text(
                    ("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –±–æ–ª–µ–µ —á–µ—Ç–∫–æ."
                     if err == "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" else
                     f"ü§î <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n<i>–ü—Ä–∏—á–∏–Ω–∞:</i> {err}"),
                    parse_mode='HTML'
                )
                return
                
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ Google Sheets —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
            logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: '{second_message}'")
            row_number = self.google_sheets.add_reminder(
                datetime_str=reminder_info.get('datetime'),  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                text=reminder_info['text'],
                timezone=reminder_info.get('timezone', 'Europe/Moscow'),
                comment=second_message  # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            )
            
            if row_number:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                reminder_data = {
                    'row': row_number,
                    'datetime': reminder_info.get('datetime'),  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                    'text': reminder_info['text'],
                    'timezone': reminder_info.get('timezone', 'Europe/Moscow')
                }
                self.inline_button_handler.set_last_reminder(user_id, reminder_data)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                from datetime import datetime
                timezone = reminder_info.get('timezone', 'Europe/Moscow')
                text = reminder_info['text']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º—è
                if reminder_info.get('datetime'):
                    dt = datetime.strptime(reminder_info['datetime'], '%Y-%m-%d %H:%M:%S')
                    formatted_time = dt.strftime('%d.%m.%Y –≤ %H:%M')
                    time_info = f"‚è∞ <b>–í—Ä–µ–º—è:</b> {formatted_time}\nüåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {timezone}\n\nüîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
                    table_info = f"<code>{reminder_info['datetime']} | {text} | {timezone} | FALSE | | {second_message[:50]}...</code>"
                else:
                    time_info = "‚ö†Ô∏è <b>–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ</b> - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"
                    table_info = f"<code> | {text} | {timezone} | FALSE | | {second_message[:50]}...</code>"
                
                success_message = (
                    f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –ø–∞—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π!</b>\n\n"
                    f"üìù <b>–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {text}\n"
                    f"üìé <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {second_message[:100]}{'...' if len(second_message) > 100 else ''}\n"
                    f"{time_info}\n\n"
                    f"üìä <i>–°—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ:</i>\n"
                    f"{table_info}"
                )
                
                await processing_message.edit_text(success_message, parse_mode='HTML')
            else:
                await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            await processing_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def process_single_message(self, user_message, update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        processing_message = await update.message.reply_text("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        try:
            # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ + –≤–∞–ª–∏–¥–∞—Ü–∏—è
            reminder_info, err = self._extract_and_validate(user_message)
            if not reminder_info:
                await processing_message.edit_text(
                    ("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –±–æ–ª–µ–µ —á–µ—Ç–∫–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "‚Ä¢ \"–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –æ –≤—Å—Ç—Ä–µ—á–µ\"\n"
                    "‚Ä¢ \"–ö—É–ø–∏—Ç—å —Ö–ª–µ–± —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\""
                     if err == "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" else
                     f"ü§î <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n<i>–ü—Ä–∏—á–∏–Ω–∞:</i> {err}"),
                    parse_mode='HTML'
                )
                return
                
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ Google Sheets
            row_number = self.google_sheets.add_reminder(
                datetime_str=reminder_info.get('datetime'),  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                text=reminder_info['text'],
                timezone=reminder_info.get('timezone', 'Europe/Moscow'),
                comment=''  # –ü—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            )
            
            if row_number:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                reminder_data = {
                    'row': row_number,
                    'datetime': reminder_info.get('datetime'),  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                    'text': reminder_info['text'],
                    'timezone': reminder_info.get('timezone', 'Europe/Moscow')
                }
                self.inline_button_handler.set_last_reminder(user_id, reminder_data)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                from datetime import datetime
                timezone = reminder_info.get('timezone', 'Europe/Moscow')
                text = reminder_info['text']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º—è
                if reminder_info.get('datetime'):
                    dt = datetime.strptime(reminder_info['datetime'], '%Y-%m-%d %H:%M:%S')
                    formatted_time = dt.strftime('%d.%m.%Y –≤ %H:%M')
                    time_info = f"‚è∞ <b>–í—Ä–µ–º—è:</b> {formatted_time}\nüåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {timezone}\n\nüîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
                    table_info = f"<code>{reminder_info['datetime']} | {text} | {timezone} | FALSE</code>"
                else:
                    time_info = "‚ö†Ô∏è <b>–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ</b> - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"
                    table_info = f"<code> | {text} | {timezone} | FALSE</code>"
                
                success_message = (
                    f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                    f"üìù <b>–¢–µ–∫—Å—Ç:</b> {text}\n"
                    f"{time_info}\n\n"
                    f"üìä <i>–°—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ:</i>\n"
                    f"{table_info}"
                )
                
                await processing_message.edit_text(success_message, parse_mode='HTML')
            else:
                await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await processing_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        voice = update.message.voice
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration}—Å")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        processing_message = await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        try:
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            recognized_text = await self.voice_processor.process_voice_message(update, context)
            
            if not recognized_text:
                await processing_message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ\n"
                    "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
                    "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ"
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            await processing_message.edit_text(f"üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<i>{recognized_text}</i>\n\nü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ...", parse_mode='HTML')
            
            # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ + –≤–∞–ª–∏–¥–∞—Ü–∏—è
            reminder_info, err = self._extract_and_validate(recognized_text)
            if not reminder_info:
                await processing_message.edit_text(
                    (f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ:\n<i>{recognized_text}</i>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –±–æ–ª–µ–µ —á–µ—Ç–∫–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "‚Ä¢ \"–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –æ –≤—Å—Ç—Ä–µ—á–µ\"\n"
                     "‚Ä¢ \"–ö—É–ø–∏—Ç—å —Ö–ª–µ–± —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\""
                     if err == "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" else
                     f"ü§î <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n<i>–ü—Ä–∏—á–∏–Ω–∞:</i> {err}"),
                    parse_mode='HTML'
                )
                return
                
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ Google Sheets
            success = self.google_sheets.add_reminder(
                datetime_str=reminder_info.get('datetime'),  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                text=reminder_info['text'],
                timezone=reminder_info.get('timezone', 'Europe/Moscow')
            )
            
            if success:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                from datetime import datetime
                timezone = reminder_info.get('timezone', 'Europe/Moscow')
                text = reminder_info['text']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º—è
                if reminder_info.get('datetime'):
                    dt = datetime.strptime(reminder_info['datetime'], '%Y-%m-%d %H:%M:%S')
                    formatted_time = dt.strftime('%d.%m.%Y –≤ %H:%M')
                    time_info = f"‚è∞ <b>–í—Ä–µ–º—è:</b> {formatted_time}\nüåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {timezone}\n\nüîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
                    table_info = f"<code>{reminder_info['datetime']} | {text} | {timezone} | FALSE</code>"
                else:
                    time_info = "‚ö†Ô∏è <b>–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ</b> - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"
                    table_info = f"<code> | {text} | {timezone} | FALSE</code>"
                
                success_message = (
                    f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>\n\n"
                    f"üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b> {recognized_text}\n\n"
                    f"üìù <b>–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {text}\n"
                    f"{time_info}\n\n"
                    f"üìä <i>–°—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ:</i>\n"
                    f"{table_info}"
                )
                
                await processing_message.edit_text(success_message, parse_mode='HTML')
            else:
                await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await processing_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫"""
        user_id = update.effective_user.id
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
            handled = await self.inline_button_handler.handle_callback_query(update, context)
            
            if not handled:
                await update.callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.")
    
    # async def handle_forwarded_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    #     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        forwarded_message = update.message
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        forwarded_text = forwarded_message.text or forwarded_message.caption or "–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.last_user_messages:
            import time
            last_msg_data = self.last_user_messages[user_id]
            time_diff = time.time() - last_msg_data['timestamp']
            
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ —Ç–∞–π–º–∞—É—Ç–∞ - —Å–≤—è–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            if time_diff < self.MESSAGE_LINK_TIMEOUT:
                # –ù–ï —É–¥–∞–ª—è–µ–º –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç handle_message_pair
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π
                await self.handle_message_pair(
                    last_msg_data['message'], 
                    forwarded_text, 
                    last_msg_data['update'], 
                    last_msg_data['context']
                )
                return
        
        # –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        processing_message = await update.message.reply_text("üìé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–µ–µ –ø–æ—è—Å–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
            if False:  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
                # –ï—Å—Ç—å –æ–∂–∏–¥–∞—é—â–µ–µ –ø–æ—è—Å–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö
                explanatory_data = self.pending_explanatory_messages[user_id]
                explanatory_message = explanatory_data['message']
                reminder_data = explanatory_data['reminder_data']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
                success = self.google_sheets.update_reminder_comment(reminder_data['row'], forwarded_text)
                
                if success:
                    # –û—á–∏—â–∞–µ–º –æ–∂–∏–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    del self.pending_explanatory_messages[user_id]
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                    success_message = (
                        f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!</b>\n\n"
                        f"üìù <b>–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {reminder_data['text']}\n"
                        f"üìé <b>–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> {forwarded_text[:100]}{'...' if len(forwarded_text) > 100 else ''}\n\n"
                        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
                    )
                    
                    await processing_message.edit_text(success_message, parse_mode='HTML')
                    return
                else:
                    await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return
            
            # –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–æ—è—Å–Ω—è—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é ChatGPT
            reminder_info = self.message_processor.extract_reminder_info(forwarded_text)
            
            if reminder_info is None:
                await processing_message.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n<i>{forwarded_text}</i>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—è—Å–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏.",
                    parse_mode='HTML'
                )
                return
                
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            is_valid, error_message = self.message_processor.validate_reminder_info(reminder_info)
            
            if not is_valid:
                logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error_message}")
                await processing_message.edit_text(
                    f"ü§î <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
                    f"<i>–ü—Ä–∏—á–∏–Ω–∞:</i> {error_message}\n\n"
                    f"üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—è—Å–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏.</b>",
                    parse_mode='HTML'
                )
                return
                
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ Google Sheets —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
            row_number = self.google_sheets.add_reminder(
                datetime_str=reminder_info['datetime'],
                text=reminder_info['text'],
                timezone=reminder_info.get('timezone', 'Europe/Moscow'),
                comment=forwarded_text  # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            )
            
            if row_number:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                reminder_data = {
                    'row': row_number,
                    'datetime': reminder_info.get('datetime'),  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                    'text': reminder_info['text'],
                    'timezone': reminder_info.get('timezone', 'Europe/Moscow')
                }
                self.inline_button_handler.set_last_reminder(user_id, reminder_data)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                from datetime import datetime
                timezone = reminder_info.get('timezone', 'Europe/Moscow')
                text = reminder_info['text']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º—è
                if reminder_info.get('datetime'):
                    dt = datetime.strptime(reminder_info['datetime'], '%Y-%m-%d %H:%M:%S')
                    formatted_time = dt.strftime('%d.%m.%Y –≤ %H:%M')
                    time_info = f"‚è∞ <b>–í—Ä–µ–º—è:</b> {formatted_time}\nüåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {timezone}\n\nüîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
                    table_info = f"<code>{reminder_info['datetime']} | {text} | {timezone} | FALSE | | {forwarded_text[:50]}...</code>"
                else:
                    time_info = "‚ö†Ô∏è <b>–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ</b> - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"
                    table_info = f"<code> | {text} | {timezone} | FALSE | | {forwarded_text[:50]}...</code>"
                
                success_message = (
                    f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>\n\n"
                    f"üìé <b>–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> {forwarded_text[:100]}{'...' if len(forwarded_text) > 100 else ''}\n\n"
                    f"üìù <b>–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {text}\n"
                    f"{time_info}\n\n"
                    f"üìä <i>–°—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ:</i>\n"
                    f"{table_info}"
                )
                
                await processing_message.edit_text(success_message, parse_mode='HTML')
            else:
                await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await processing_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.application.run_polling()

    async def run_async(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º event loop"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (async)...")
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ (–±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–µ)
            while True:
                await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            raise 